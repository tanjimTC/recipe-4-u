{"version":3,"sources":["Recipe/RecipeItems.js","Recipe/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["RecipeItems","image","title","cal","ingredients","className","map","x","text","src","alt","Recipe","useState","recipe","setRecipe","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","key","label","calories","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wLAwBeA,G,UApBK,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAU,qBACX,wBAAIA,UAAU,SAASH,GACvB,wBAAIG,UAAU,2BACd,wBAAIA,UAAU,QACXD,EAAYE,KAAI,SAACC,GAAD,OACf,4CAAQA,EAAEC,UAGd,uBAAGH,UAAU,cAAb,gCAA8CF,GAC9C,yBACEM,IAAKR,EACLS,IAAI,GACJL,UAAU,iCC6CLM,EAxDA,WACb,IADmB,EAKSC,mBAAS,IALlB,mBAKZC,EALY,KAKJC,EALI,OAMSF,mBAAS,IANlB,mBAMZG,EANY,KAMJC,EANI,OAOOJ,mBAAS,UAPhB,mBAOZK,EAPY,KAOLC,EAPK,KASnBC,qBAAU,WACRC,MACC,CAACH,IAGJ,IAYMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OACSL,EADT,mBA1BrB,WA0BqB,oBAzBpB,qCAwBQ,cACVM,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBC,QAAQC,IAAIF,GACZX,EAAUW,EAAKG,MANC,2CAAH,qDASf,OACE,yBAAKvB,UAAU,QAAf,IAAuB,6BAAvB,IAA6B,6BAC3B,0BAAMwB,SAlBQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAemBX,UAAU,QACnC,2BAAO2B,YAAY,SAAS3B,UAAU,cAAc4B,KAAK,OAAOC,MAAOnB,EAAQoB,SAxBhE,SAACL,GACpBd,EAAUc,EAAEM,OAAOF,UAwBf,4BAAQ7B,UAAU,iBAAlB,WAEF,yBAAKA,UAAU,WACdQ,EAAOP,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CACE8B,IAAK9B,EAAEM,OAAOyB,MACdrC,MAAOM,EAAEM,OAAOZ,MAChBC,MAAOK,EAAEM,OAAOyB,MAChBnC,IAAKI,EAAEM,OAAO0B,SACdnC,YAAaG,EAAEM,OAAOT,kBAZ5B,IAeS,6BAfT,IAee,+BC/CJoC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.e99701a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"tachyons\";\r\nimport \"./items.css\";\r\n\r\nconst RecipeItems = ({ image, title, cal, ingredients }) => {\r\n  return (\r\n    <div className=\"card-body grow tc\">\r\n        <h1 className=\"f4 tc\">{title}</h1>\r\n        <hr className=\"mw3 bb bw1 b--black-10\"></hr>\r\n        <ol className='list'>\r\n          {ingredients.map((x) => (\r\n            <li>ðŸ‘‰ {x.text}</li>\r\n          ))}\r\n        </ol>\r\n        <p className='tc pt2 pb2'>total calories ðŸ”¥  {cal}</p>\r\n        <img\r\n          src={image}\r\n          alt=\"\"\r\n          className=\"br-100 h4 b--black-05 pa2\"\r\n        />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeItems;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport RecipeItems from \"./RecipeItems\";\r\nimport 'tachyons';\r\nimport './items.css'\r\n//a60a9308\r\n//1f955083069a1c29e9664e87f4026b94\r\n//https://api.edamam.com/search?q=chicken&app_id=${a60a9308}&app_key=${1f955083069a1c29e9664e87f4026b94}\r\nconst Recipe = () => {\r\n  let ID = \"a60a9308\";\r\n  let KEY = \"1f955083069a1c29e9664e87f4026b94\";\r\n\r\n\r\n  const [recipe, setRecipe] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState('banana')\r\n\r\n  useEffect(() => {\r\n    getRecipe();\r\n  }, [query]);\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n\r\n  const getSearch = (e)=>{\r\n    e.preventDefault()\r\n    setQuery(search)\r\n    setSearch('')\r\n  }\r\n\r\n\r\n  const getRecipe = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${ID}&app_key=${KEY}`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data);\r\n    setRecipe(data.hits);\r\n  };\r\n\r\n  return (\r\n    <div className=\"body\"> <br/> <br/> \r\n      <form onSubmit={getSearch} className='form'>\r\n        <input placeholder='search' className='input-field' type=\"text\" value={search} onChange={handleChange} />\r\n        <button className='search-button'>Search</button>\r\n      </form>\r\n      <div className=\"recipes\">\r\n      {recipe.map((x) => (\r\n        <RecipeItems\r\n          key={x.recipe.label}\r\n          image={x.recipe.image}\r\n          title={x.recipe.label}\r\n          cal={x.recipe.calories}\r\n          ingredients={x.recipe.ingredients}\r\n        />\r\n      ))}\r\n      </div> <br/> <br/>\r\n    </div> \r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React from 'react';\nimport Recipe from './Recipe/Recipe';\n\nfunction App() {\n  return (\n    <div>\n      <Recipe/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}